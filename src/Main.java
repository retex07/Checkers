import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;


public class Main extends JPanel {
    public static final int sizeBoardGame = 164 * 3;

    public static void main(String[] args) {
        JFrame window = new JFrame("–®–∞—à–∫–∏");
        Main content = new Main();
        window.setContentPane(content);
        window.pack();
        Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
        window.setLocation((screensize.width - window.getWidth()) / 2,
                (screensize.height - window.getHeight()) / 2);
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.setResizable(false);
        window.setVisible(true);
    }

    private JButton newGameButton;
    private JButton resignButton;
    private JLabel message;
    private JLabel counter;
    private JLabel WhitePlayer;
    private JLabel BlackPlayer;
    private JTextField playerOne;
    private JTextField playerTwo;
    private JRadioButton gameWithPlayer;
    private JRadioButton gameWithRobot;
    private JButton aboutProgram;

    public Main() {
        int sizeStartGuiWindow = sizeBoardGame + 108;

        setLayout(null);
        setPreferredSize(new Dimension(sizeStartGuiWindow - 66, sizeStartGuiWindow + 100));

        setBackground(new Color(255, 255, 255));

        Board board = new Board();

        add(board);
        add(newGameButton);
        add(resignButton);
        add(gameWithPlayer);
        add(gameWithRobot);
        add(playerOne);
        add(playerTwo);
        add(WhitePlayer);
        add(BlackPlayer);
        add(counter);
        add(message);
        add(aboutProgram);

        board.setBounds(20, 20, sizeBoardGame, sizeBoardGame);
        counter.setBounds(0, sizeBoardGame + 20, sizeBoardGame, 30);
        message.setBounds(0, sizeBoardGame + 40, sizeBoardGame, 30);
        WhitePlayer.setBounds(sizeBoardGame / 4 + 2, sizeBoardGame + 60, sizeBoardGame / 4, 30);
        BlackPlayer.setBounds(sizeBoardGame / 2 + 20, sizeBoardGame + 60, sizeBoardGame / 4, 30);
        playerOne.setBounds(sizeBoardGame / 2 - 120, sizeBoardGame + 86, 120, 30);
        playerTwo.setBounds(sizeBoardGame / 2 + 20, sizeBoardGame + 86, 120, 30);
        newGameButton.setBounds(sizeBoardGame / 2 - 120, sizeBoardGame + 126, 120, 30);
        resignButton.setBounds(sizeBoardGame / 2 + 20, sizeBoardGame + 126, 120, 30);
        gameWithPlayer.setBounds(sizeBoardGame / 2 - 120, sizeBoardGame + 166, 120, 30);
        gameWithRobot.setBounds(sizeBoardGame / 2 + 20, sizeBoardGame + 166, 120, 30);
        aboutProgram.setBounds(sizeBoardGame / 2 - 80, 1, 180, 20);
    }

    public class Board extends JPanel implements ActionListener, MouseListener {
        CheckersData board; //–î–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —à–∞—à–µ—á–Ω–æ–π –¥–æ—Å–∫–∏
        boolean gameInProgress; //–ò–¥–µ—Ç –ª–∏ –∏–≥—Ä–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç

        int currentPlayer; //–ß—å—è —Ç–µ–ø–µ—Ä—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å

        /* –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —Ñ–∏–≥—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è,
        —Ç–æ —ç—Ç–∏ –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞—é—Ç —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç—É —à–∞—à–∫—É.
        –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —à–∞—à–∫–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, —Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–≤–Ω–∞ -1 */
        int selectedRow, selectedCol;

        int counterBlack = 0; //–ö–æ–ª-–≤–æ —Å—Ä—É–±–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω—ã—Ö (–¥–ª—è —Å—á–µ—Ç–∞)
        int counterWhite = 0; //–ö–æ–ª-–≤–æ —Å—Ä—É–±–ª–µ–Ω–Ω—ã—Ö –±–µ–ª—ã—Ö (–¥–ª—è —Å—á–µ—Ç–∞)

        CheckersMove[] legalMoves; //–ú–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ö–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞

        Board() {
            setBackground(Color.BLACK);
            addMouseListener(this);
            aboutProgram = new JButton("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ");
            aboutProgram.addActionListener(this);
            gameWithPlayer = new JRadioButton("–ò–≥—Ä–∞ —Å –¥—Ä—É–≥–æ–º");
            gameWithPlayer.addActionListener(this);
            gameWithPlayer.setBackground(new Color(0xFFFFFF));
            gameWithRobot = new JRadioButton("–ò–≥—Ä–∞ —Å —Ä–æ–±–æ—Ç–æ–º");
            gameWithRobot.addActionListener(this);
            gameWithRobot.setBackground(new Color(0xFFFFFF));
            gameWithRobot.setSelected(true);
            ButtonGroup groupButtonGame = new ButtonGroup();
            groupButtonGame.add(gameWithPlayer);
            groupButtonGame.add(gameWithRobot);
            resignButton = new JButton("–°–¥–∞—Ç—å—Å—è");
            resignButton.addActionListener(this);
            resignButton.setEnabled(false);
            resignButton.setBackground(Color.RED);
            resignButton.setForeground(Color.WHITE);
            newGameButton = new JButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
            newGameButton.addActionListener(this);
            newGameButton.setBackground(Color.GREEN);
            newGameButton.setForeground(Color.WHITE);
            WhitePlayer = new JLabel("–ù–∏–∫ –±–µ–ª—ã—Ö:");
            WhitePlayer.setFont(new Font("Serif", Font.BOLD, 14));
            WhitePlayer.setForeground(Color.BLACK);
            BlackPlayer = new JLabel("–ù–∏–∫ —á–µ—Ä–Ω—ã—Ö:");
            BlackPlayer.setFont(new Font("Serif", Font.BOLD, 14));
            BlackPlayer.setForeground(Color.BLACK);
            playerOne = new JTextField("Player1");
            playerOne.setHorizontalAlignment(JTextField.CENTER);
            playerTwo = new JTextField("Player2");
            playerTwo.setHorizontalAlignment(JTextField.CENTER);
            playerTwo.setEnabled(false);
            message = new JLabel("", JLabel.CENTER);
            message.setFont(new Font("Serif", Font.BOLD, 14));
            counter = new JLabel("", JLabel.CENTER);
            counter.setFont(new Font("Serif", Font.BOLD, 17));
            counter.setForeground(Color.BLACK);
            board = new CheckersData();
        }

        //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–∫ –∫–Ω–æ–ø–æ–∫
        public void actionPerformed(ActionEvent evt) {
            Object src = evt.getSource();

            if (src == gameWithRobot)
                playerTwo.setEnabled(false);
            else if (src == gameWithPlayer) {
                playerTwo.setEnabled(true);
            } else if (src == newGameButton) {
                if ((playerOne.getText().equals("") || playerTwo.getText().equals("")) && !gameWithRobot.isSelected()) {
                    message.setForeground(Color.RED);
                    message.setText("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤!");
                    counter.setText("");
                } else if (playerOne.getText().equals("") && gameWithRobot.isSelected()) {
                    message.setForeground(Color.RED);
                    message.setText("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ –±–µ–ª—ã—Ö —à–∞—à–µ–∫!");
                    counter.setText("");
                } else
                    doNewGame();
            } else if (src == aboutProgram) {
                JOptionPane.showMessageDialog(this,
                        """
                                ‚òÖ -_-_-_-_-_-_-_-_-_-_-_-_-_-_- | @retex07 | -_-_-_-_-_-_-_-_-_-_-_-_-_-_- ‚òÖ

                                üõà –û–± –∏–≥—Ä–µ:
                                 –î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑
                                 —Å–µ–±—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É –≤ —Ä—É—Å—Å–∫–∏–µ —à–∞—à–∫–∏.
                                
                                ‚òÖ -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- ‚òÖ
                                
                                üõà –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã:
                                 –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã: "–° –¥—Ä—É–≥–æ–º" –∏–ª–∏ "–° —Ä–æ–±–æ—Ç–æ–º".
                                 –ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞(-–∫–æ–≤) –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                 –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É".
                                
                                ‚òÖ -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- ‚òÖ
                                
                                üõà –•–æ–¥—ã —Ñ–∏–≥—É—Ä:
                                 - –ö–∞–∂–¥–∞—è —Ñ–∏–≥—É—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –¥–∞–º–∫–∞, —Ö–æ–¥–∏—Ç –≤—Å–µ–≥–æ–ª–∏—à—å —á–µ—Ä–µ–∑ –æ–¥–Ω—É
                                  –∫–ª–µ—Ç–∫—É - –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —á–µ—Ä–µ–∑ —Ñ–∏–≥—É—Ä—É;
                                 - –î–∞–º–∫–æ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–∏—à—å —Ç–∞ —Ñ–∏–≥—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Ö–æ–¥–∏—Ç –¥–æ
                                  –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ü–∞ –ø–æ–ª—è;
                                 - –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å—Ä—É–±–∏—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞
                                  –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ç–æ–∏—Ç –≤ —Å–æ—Å–µ–¥–Ω–µ–π –∫–ª–µ—Ç–∫–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏;
                                 - –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å—Ä—É–±–∏—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ –≤—Å–µ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –ø–æ–ª—è,
                                  –µ—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –¥–∞–º–∫–æ–π;
                                 - –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç —Å—Ö–æ–¥–∏—Ç—å –≤ —Å–æ—Å–µ–¥–Ω—é—é –∫–ª–µ–∫—Ç—É, –µ—Å–ª–∏ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
                                  —Å—Ç–æ–∏—Ç –¥—Ä—É–≥–∞—è —Ñ–∏–≥—É—Ä–∞;
                                 - –ò–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç —Å—Ä—É–±–∏—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –µ—Å–ª–∏ –∑–∞ –µ–≥–æ —Ñ–∏–≥—É—Ä–æ–π
                                  —Å—Ç–æ–∏—Ç –≤—Ç–æ—Ä–∞—è —Ñ–∏–≥—É—Ä–∞ –ø–æ–¥—Ä—è–¥.
                                
                                ‚òÖ -_-_-_-_-_-_-_-_-_-_-_-_-_-_- | @retex07 | -_-_-_-_-_-_-_-_-_-_-_-_-_-_- ‚òÖ
                                """,
                        "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", JOptionPane.PLAIN_MESSAGE
                );
            } else if (src == resignButton)
                doResign();
        }

        //–ù–æ–≤–∞—è –∏–≥—Ä–∞
        void doNewGame() {
            if (gameInProgress) {
                message.setForeground(Color.RED);
                message.setText("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É!");
                return;
            }

            counterBlack = 0; //–û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç –ø–æ –Ω–∞—á–∞–ª—É –∏–≥—Ä—ã
            counterWhite = 0;

            board.setUpGame(); //–†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏ –ø–æ –º–µ—Å—Ç–∞–º
            currentPlayer = CheckersData.WHITE; //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤, —á—Ç–æ –±–µ–ª—ã–µ —Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–º–∏
            legalMoves = board.getLegalMoves(CheckersData.WHITE); //–ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ö–æ–¥–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã —É –±–µ–ª—ã—Ö
            selectedRow = -1; //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –±–µ–ª—ã–µ –µ—â–µ –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ —Ñ–∏–≥—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            message.setForeground(new Color(0xFFC900));
            message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: " + playerOne.getText());
            counter.setText(counterBlack + " : " + counterWhite);
            gameInProgress = true;
            newGameButton.setEnabled(false);
            resignButton.setEnabled(true);

            if (gameWithRobot.isSelected())
                gameWithPlayer.setEnabled(false);
            else
                gameWithRobot.setEnabled(false);

            repaint();
        }

        //–°–¥–∞—Ç—å—Å—è
        void doResign() {
            if (!gameInProgress) {
                message.setText("–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!");
                return;
            }
            if (currentPlayer == CheckersData.WHITE) {
                if (gameWithRobot.isSelected())
                    gameOver("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∏–≥—Ä–∞–ª! " + playerOne.getText() + " —Å–¥–∞–ª—Å—è(-–ª–∞—Å—å).");
                else
                    gameOver(playerTwo.getText() + " –≤—ã–∏–≥—Ä–∞–ª(-–∞)! " + playerOne.getText() + " —Å–¥–∞–ª—Å—è(-–ª–∞—Å—å).");
            } else
                gameOver(playerOne.getText() + " –≤—ã–∏–≥—Ä–∞–ª(-–∞)! " + playerTwo.getText() + " —Å–¥–∞–ª—Å—è(-–ª–∞—Å—å).");

            gameWithPlayer.setEnabled(true);
            gameWithRobot.setEnabled(true);
        }

        //–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        void gameOver(String str) {
            message.setText(str);
            newGameButton.setEnabled(true);
            resignButton.setEnabled(false);
            gameInProgress = false;
        }

        /**
         * –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∏ —Å—Ç–æ–ª–±—Ü–µ.
         */
        void doClickSquare(int row, int col) {
             /* –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ñ–∏–≥—É—Ä, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å,
             —Ç–æ –æ—Ç–º–µ—á–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.
             –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –æ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */

            for (int i = 0; i < legalMoves.length; i++)
                if (legalMoves[i].fromRow == row && legalMoves[i].fromCol == col) {
                    selectedRow = row;
                    selectedCol = col;
                    if (currentPlayer == CheckersData.WHITE)
                        message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: " + playerOne.getText());
                    else {
                        if (!gameWithRobot.isSelected())
                            message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –ö–æ–º–ø—å—é—Ç–µ—Ä");
                        else
                            message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: " + playerTwo.getText());
                    }
                    repaint();
                    return;
                }
         
             /* –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —Ñ–∏–≥—É—Ä–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è,
             —Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–≥—É—Ä—É */

            if (selectedRow < 0) {
                message.setText("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–≥—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å.");
                return;
            }
         
             /* –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç, –∫—É–¥–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
             –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞, —Ç–æ –¥–µ–ª–∞–µ–º —Ö–æ–¥ */

            for (int i = 0; i < legalMoves.length; i++)
                if (legalMoves[i].fromRow == selectedRow && legalMoves[i].fromCol == selectedCol
                        && legalMoves[i].toRow == row && legalMoves[i].toCol == col) {
                    doMakeMove(legalMoves[i]);
                    return;
                }
         
             /* –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Ä–∞–Ω–µ–µ –∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞,
             –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç */

            message.setText("–©–µ–ª–∫–Ω–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è.");
        }

        /**
         * –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ö–æ–¥.
         * –î–µ–ª–∞–µ–º —Ö–æ–¥, –∞ –∑–∞—Ç–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ–º, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
         */
        void doMakeMove(CheckersMove move) {
            boolean isCutDown = board.makeMove(move); //–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ä—É–±–ª–µ–Ω–∞ —à–∞—à–∫–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —ç—Ç–∏–º —Ö–æ–¥–æ–º

             /* –ï—Å–ª–∏ —Ö–æ–¥ –±—ã–ª "—Å—Ä—É–±–∏—Ç—å", —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ö–æ–¥ "—Å—Ä—É–±–∏—Ç—å".
             –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—Ä—É–±–∏—Ç—å —Å –∫–≤–∞–¥—Ä–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π
             —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ø–∞–ª –∏–≥—Ä–æ–∫. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ö–æ–¥, —Ç–æ –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω —Å—Ä—É–±–∏—Ç—å.
             –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ–º –î–∞–º–∫–æ–π, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ö–æ–¥–æ–º
             –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—Ç–æ-—Ç–æ —Å—Ä—É–±–∏–ª */

            if (move.isJump(board.pieceAt(move.toRow, move.toCol))) {
                //–ï—Å–ª–∏ —É–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–º–∫–æ–π –∏ —Ö–æ–¥ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —à–∞—à–∫–∏, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
                if (board.pieceAt(move.toRow, move.toCol) == CheckersData.WHITE_KING && isCutDown) {
                    counterBlack++;
                } else if (board.pieceAt(move.toRow, move.toCol) == CheckersData.BLACK_KING && isCutDown) {
                    counterWhite++;
                }

                /* –¢–∞–∫ –∫–∞–∫ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ isJump –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∏–≥—É—Ä –ø—Ä–æ–≤—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω—â–µ–Ω–∏–µ –Ω–∞ 2 –∫–ª–µ—Ç–∫–∏,
                —Ç–æ –∞–ø—Ä–∏–æ—Ä–∏ —Ç—É—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –≤—Ä–∞–∂–µ—Å–∫–∞—è —à–∞—à–∫–∞ –±—ã–ª–∞ —Å—Ä—É–±–ª–µ–Ω–∞.
                –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç */

                else if (board.pieceAt(move.toRow, move.toCol) == CheckersData.WHITE)
                    counterBlack++;
                else if (board.pieceAt(move.toRow, move.toCol) == CheckersData.BLACK)
                    counterWhite++;

                counter.setText(counterBlack + " : " + counterWhite);

                legalMoves = board.getLegalJumpsFrom(currentPlayer, move.toRow, move.toCol);

                if (gameWithRobot.isSelected() && legalMoves != null && currentPlayer == CheckersData.BLACK) {
                    CheckersMove temp = legalMoves[(int) (Math.random() * legalMoves.length)];
                    doClickSquare(temp.fromRow, temp.fromCol);
                    doClickSquare(temp.toRow, temp.toCol);
                }

                /* –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ–¥—ã "—Å—Ä—É–±–∏—Ç—å" –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ö–æ–¥–æ–º –º—ã —Ä—É–±–∏–ª–∏,
                —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏–≥—Ä–æ–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */

                if (legalMoves != null && isCutDown) {
                    if (currentPlayer == CheckersData.WHITE)
                        message.setText(playerOne.getText() + ", –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä—É–±–∏—Ç—å.");
                    else
                        message.setText(playerTwo.getText() + ", –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä—É–±–∏—Ç—å.");
                    selectedRow = move.toRow;  //–¢–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —à–∞—à–∫—É, —Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –µ–µ
                    selectedCol = move.toCol;
                    repaint();
                    return;
                }
            }
         
             /* –•–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
             –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç
             –ø—Ä–∞–∏–≤–ª—å–Ω—ã—Ö —Ö–æ–¥–æ–≤, —Ç–æ –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è */

            if (currentPlayer == CheckersData.WHITE) {
                currentPlayer = CheckersData.BLACK;
                legalMoves = board.getLegalMoves(currentPlayer);

                /* –ï—Å–ª–∏ –∏–≥—Ä–∞ —Å —Ä–æ–±–æ—Ç–æ–º, —Ç–æ –∑–∞–ø—É—Å—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Ö–æ–¥–∞
                –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–ª—è —á–µ—Ä–Ω—ã—Ö —à–∞—à–µ–∫ */

                if (legalMoves == null)
                    if (gameWithRobot.isSelected())
                        gameOver("–£ –ö–æ–º–ø—å—é—Ç–µ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ö–æ–¥–æ–≤. " + playerOne.getText() + " –≤—ã–∏–≥—Ä–∞–ª(-–∞)!");
                    else
                        gameOver("–£ " + playerTwo.getText() + " –±–æ–ª—å—à–µ –Ω–µ—Ç —Ö–æ–¥–æ–≤. " + playerOne.getText() + " –≤—ã–∏–≥—Ä–∞–ª(-–∞)!");
                else if (legalMoves[0].isJump(currentPlayer) && !gameWithRobot.isSelected())
                    message.setText(playerTwo.getText() + ", –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä—É–±–∏—Ç—å.");
                else {
                    if (gameWithRobot.isSelected())
                        message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –ö–æ–º–ø—å—é—Ç–µ—Ä");
                    else
                        message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: " + playerTwo.getText());
                }
            } else {
                currentPlayer = CheckersData.WHITE;
                legalMoves = board.getLegalMoves(currentPlayer);

                if (legalMoves == null)
                    if (gameWithRobot.isSelected())
                        gameOver("–£ " + playerOne.getText() + " –±–æ–ª—å—à–µ –Ω–µ—Ç —Ö–æ–¥–æ–≤. " + "–ö–æ–º–ø—å—é—Ç–µ—Ä" + " –≤—ã–∏–≥—Ä–∞–ª!");
                    else
                        gameOver("–£ " + playerOne.getText() + " –±–æ–ª—å—à–µ –Ω–µ—Ç —Ö–æ–¥–æ–≤. " + playerTwo.getText() + " –≤—ã–∏–≥—Ä–∞–ª(-–∞)!");
                else if (legalMoves[0].isJump(currentPlayer))
                    message.setText(playerOne.getText() + ", –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä—É–±–∏—Ç—å.");
                else
                    message.setText("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç: " + playerOne.getText());
            }
         
             /* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º selectedRow = -1, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å,
             —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª —Ñ–∏–≥—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */

            selectedRow = -1;
         
             /* –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–æ–¥–æ–º –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —à–∞—à–∫–æ–π,
             —Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ–µ –≤—ã–±–µ—Ä–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ */

            if (legalMoves != null) {
                boolean sameStartSquare = true;
                for (int i = 1; i < legalMoves.length; i++)
                    if (legalMoves[i].fromRow != legalMoves[0].fromRow
                            || legalMoves[i].fromCol != legalMoves[0].fromCol) {
                        sameStartSquare = false;
                        break;
                    }
                if (sameStartSquare) {
                    selectedRow = legalMoves[0].fromRow;
                    selectedCol = legalMoves[0].fromCol;
                }
            }

            if (gameWithRobot.isSelected() && legalMoves != null && currentPlayer == CheckersData.BLACK) {
                CheckersMove temp = legalMoves[(int) (Math.random() * legalMoves.length)];
                doClickSquare(temp.fromRow, temp.fromCol);
                doClickSquare(temp.toRow, temp.toCol);
            }

            repaint();
        }

        /**
         * –†–∏—Å—É–µ–º –¥–æ—Å–∫—É –∏ —Ä–∞—Å–∫–∏–¥—ã–≤–∞–µ–º –ø–æ –¥–æ—Å–∫–µ —à–∞—à–∫–∏.
         * –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –≤ –º–∞—Å—Å–∏–≤–µ
         */
        public void paintComponent(Graphics g) {
            //–†–∏—Å—É–µ–º —á–µ—Ä–Ω—É—é —Ä–∞–º–∫—É –ø–æ –∫—Ä–∞—è–º –¥–æ—Å–∫–∏
            g.setColor(Color.black);
            g.drawRect(1, 1, getSize().width - 3, getSize().height - 3);

            //–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —à–∞—à–µ–∫ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –¥–æ—Å–∫–µ
            int sizeRowAndCol = sizeBoardGame / 8;
            int widthAndHeight = (int) (sizeBoardGame / 10.5);
            int cordCheckersBoard = (sizeRowAndCol - widthAndHeight) / 2 + 2;

            //–†–∏—Å—É–µ–º —à–∞—à–∫–∏ –∏ –∫–≤–∞–¥—Ä–∞—Ç—ã —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
            for (int row = 0; row < 8; row++) {
                for (int col = 0; col < 8; col++) {
                    if (row % 2 == col % 2)
                        g.setColor(Color.LIGHT_GRAY);
                    else
                        g.setColor(Color.GRAY);

                    g.fillRect(
                            2 + col * sizeRowAndCol,
                            2 + row * sizeRowAndCol,
                            sizeRowAndCol,
                            sizeRowAndCol
                    );

                    switch (board.pieceAt(row, col)) {
                        case CheckersData.WHITE -> {
                            g.setColor(Color.WHITE);
                            g.fillOval(cordCheckersBoard + col * sizeRowAndCol, cordCheckersBoard + row * sizeRowAndCol,
                                    widthAndHeight, widthAndHeight
                            );
                        }
                        case CheckersData.BLACK -> {
                            g.setColor(Color.BLACK);
                            g.fillOval(cordCheckersBoard + col * sizeRowAndCol, cordCheckersBoard + row * sizeRowAndCol,
                                    widthAndHeight, widthAndHeight
                            );
                        }
                        case CheckersData.WHITE_KING -> {
                            g.setColor(Color.WHITE);
                            g.fillOval(cordCheckersBoard + col * sizeRowAndCol, cordCheckersBoard + row * sizeRowAndCol,
                                    widthAndHeight, widthAndHeight
                            );
                            g.setColor(Color.BLACK);
                            g.drawString(
                                    "–î",
                                    sizeBoardGame / 17 + col * sizeRowAndCol,
                                    sizeBoardGame / 14 + row * sizeRowAndCol
                            );
                        }
                        case CheckersData.BLACK_KING -> {
                            g.setColor(Color.BLACK);
                            g.fillOval(cordCheckersBoard + col * sizeRowAndCol, cordCheckersBoard + row * sizeRowAndCol,
                                    widthAndHeight, widthAndHeight
                            );
                            g.setColor(Color.WHITE);
                            g.drawString(
                                    "–î",
                                    sizeBoardGame / 17 + col * sizeRowAndCol,
                                    sizeBoardGame / 14 + row * sizeRowAndCol
                            );
                        }
                    }
                }
            }

            //–ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
            if (gameInProgress) {

                //–†–∏—Å—É–µ–º –≥–æ–ª—É–±—É—é —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ —Ñ–∏–≥—É—Ä, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
                g.setColor(Color.cyan);

                for (int i = 0; i < legalMoves.length; i++) {
                    g.drawRect(
                            2 + legalMoves[i].fromCol * (sizeBoardGame / 8),
                            2 + legalMoves[i].fromRow * (sizeBoardGame / 8),
                            sizeBoardGame / 8 - 1, sizeBoardGame / 8 - 1
                    );
                }

                /* –ï—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, —Ç–æ —Ä–∏—Å—É–µ–º –±–µ–ª—É—é
                —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ —ç—Ç–æ–π —Ñ–∏–≥—É—Ä—ã –∏ —Ä–∏—Å—É–µ–º –∑–µ–ª–µ–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞,
                –≤ –∫–æ—Ç–æ—Ä—ã–π —ç—Ç–∞ —Ñ–∏–≥—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ */

                if (selectedRow >= 0) {
                    g.setColor(Color.white);
                    g.drawRect(
                            2 + selectedCol * (sizeBoardGame / 8),
                            2 + selectedRow * (sizeBoardGame / 8),
                            sizeBoardGame / 8 - 1, sizeBoardGame / 8 - 1
                    );

                    g.setColor(Color.green);

                    for (int i = 0; i < legalMoves.length; i++) {
                        if (legalMoves[i].fromCol == selectedCol && legalMoves[i].fromRow == selectedRow) {
                            g.drawRect(
                                    2 + legalMoves[i].toCol * (sizeBoardGame / 8),
                                    2 + legalMoves[i].toRow * (sizeBoardGame / 8),
                                    sizeBoardGame / 8 - 1, sizeBoardGame / 8 - 1
                            );
                        }
                    }
                }
            }

        }

        /**
         * –û—Ç—á–µ–≤–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ –¥–æ—Å–∫–µ. –ï—Å–ª–∏ —Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è,
         * –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –∏—â–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü,
         * –ø–æ –∫–æ—Ç–æ—Ä—ã–º —â–µ–ª–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –≤—ã–∑—ã–≤–∞–µ–º doClickSquare(), —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ–¥
         */
        public void mousePressed(MouseEvent evt) {
            if (!gameInProgress)
                message.setText("–ù–∞–∂–º–∏—Ç–µ \"–ù–∞—á–∞—Ç—å –∏–≥—Ä—É\" –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏.");
            else {
                int col = (evt.getX() - 2) / (sizeBoardGame / 8);
                int row = (evt.getY() - 2) / (sizeBoardGame / 8);
                if (col >= 0 && col < 8 && row >= 0 && row < 8)
                    doClickSquare(row, col);
            }
        }

        public void mouseReleased(MouseEvent evt) {
        }

        public void mouseClicked(MouseEvent evt) {
        }

        public void mouseEntered(MouseEvent evt) {
        }

        public void mouseExited(MouseEvent evt) {
        }
    }
}